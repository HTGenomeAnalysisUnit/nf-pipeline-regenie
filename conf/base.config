process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in [143,137,104,134,139,140,247] ? 'retry' : 'finish' }
    maxRetries    = 3

    withLabel: 'plink_clump' {
        cpus   = 1
        time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    }
    
    withLabel: 'process_plink2' {
        cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    withLabel: 'html_report' {
        //errorStrategy = { task.exitStatus in [143,137,104,134,139,140,247] ? 'retry' : 'ignore' }
        cpus   = { check_max( 1     * task.attempt, 'cpus'   ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        container = 'edg1983/gwas-rmd-reports:v3.0'
    }

    //recommend to run regenie using multi-threading (8+ threads)
    withLabel: 'step1_single'
    {
        cpus   = { check_max( 12    * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time   = { check_max( 6.h  * task.attempt, 'time'   ) }
    }

    withLabel: 'step1_runl0'
    {
        cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    }

    withLabel: 'step1_runl1'
    {
        cpus   = { check_max( 6    * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h  * task.attempt, 'time'   ) }
    }

    withLabel: 'step2_gwas'
    {
        cpus   = { check_max( 8     * task.attempt, 'cpus'   ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
    }

    withLabel: 'step2_rarevar'
    {
        cpus   = { check_max( 8     * task.attempt, 'cpus'   ) }
        memory = { check_max( 42.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h   * task.attempt, 'time'   ) }
    }

    withLabel: 'small_task'
    {
        cpus = 1
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    }

    withName: 'CONCAT_STEP2_RESULTS'
    {
        cpus = 1
        memory = 8.GB
    }

}
