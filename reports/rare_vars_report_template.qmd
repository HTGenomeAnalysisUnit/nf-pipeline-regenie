---
title: "Report: GWAS analysis"
format: 
  html:
    page-layout: full
    css: quarto_report.css
    embed-resources: true
number-sections: true
toc: true
toc-depth: 3
toc-title: "Results sections"
toc-location: "left"
toc-expand: true
jupyter: python3
fig-dpi: 150
execute:
  echo: false
  warning: false
---

```{python params}
#| tags: [parameters]

sig_value_column_dict = {
  "FDR_bygroup": "LOG10P_FDR_bygroup",
  "FDR_alltests": "LOG10P_FDR_alltests",
  "BONF_bygroup": "LOG10P_BONF_bygroup",
  "BONF_alltests": "LOG10P_BONF_alltests"
  }

project = "test-gwas"
date = "2021-08-09"
version = "v0.2"
sumstat_file = "test/p21001_i0.rarevars.regenie.gz"
phenotype = "p21001_i0"
covariates = "COV1"
phenotype_file = "test/regenie_pheno_input.pheno.validated.txt"
regenie_step1_log = None
regenie_step2_log = None
phenotype_log = None
covariate_log = None
tophits_min_value = "5"
sig_value_threshold = "1.3"
significance_stat_test = "FDR_bygroup"
genome_build = "hg19"
sumstat_format = "regenie"
sig_value_column = sig_value_column_dict[significance_stat_test]
                            
#conda: python <3.10 matplotlib==3.5.0 mscorefonts tabix pip: skimpy gwaslab papermill
```

```{python load_libraries}
import pandas as pd
import numpy as np
import gwaslab as gl
import os
from skimpy import skim
from IPython.display import display, Markdown
from statsmodels.sandbox.stats.multicomp import multipletests
```

```{python datatypes}
tophits_min_value = float(tophits_min_value)
sig_value_threshold = float(sig_value_threshold)
genome_build = genome_build.replace("hg", "")
regenie_filename = os.path.basename(sumstat_file)
```

## Project Summary

```{python project_summary}
display(Markdown(
  f"""
| Parameter     | Value                                      |
| ------------- |--------------------------------------------|
| Project       | {project}                         |
| Pipeline Version       | {version}                |
| Date       | {date}                         |
| Phenotype File      | {phenotype_file}            |
| Phenotype       | {phenotype}                     |
| Covariates       | {covariates}                     |
| Regenie Output      | {regenie_filename}             |
"""
))
```

## Phenotype Statistics

### Overview

```{python phenotype_overview}
phenotypeTable = pd.read_csv(phenotype_file, sep="\t")[[phenotype]]
skim(phenotypeTable)
```

### Phenotype distribution

```{python plot_phenos}
#Get the number of unique values
n_unique = len(phenotypeTable[phenotypeTable[phenotype].notnull()][phenotype].unique())

if (n_unique == 2):
  #Plot barplot
  phenotypeTable[phenotype].value_counts().plot(kind='bar')
else:
  #Plot histogram
  phenotypeTable[phenotype].plot(kind='hist')
```

## Main results

Following plots summarise results across all tests and AF bins by plotting only the most significant result for each gene. Note that in case of ties all results with the same pvalue are plotted. 

```{python process_results}
# BEGIN: ed8c6549bwf9
#Compute bonferroni and FDR corrected P across all tests
dt = pd.read_csv(sumstat_file, sep='\t', skiprows=1)
dt['LOG10P_BONF_alltests'] = -np.log10(multipletests(10 ** -dt['LOG10P'], method='bonferroni')[1])
dt['LOG10P_FDR_alltests'] = -np.log10(multipletests(10 ** -dt['LOG10P'], method='fdr_bh')[1])


# Compute bonferroni and FDR corrected P for each specific test
# This means each combination of AF bin, mask and statistical test
dt['LOG10P_BONF_bygroup'] = dt.groupby(['ALLELE1', 'TEST'])['LOG10P'].transform(lambda x: -np.log10(multipletests(10 ** -x, method='bonferroni')[1]))
dt['LOG10P_FDR_bygroup'] = dt.groupby(['ALLELE1', 'TEST'])['LOG10P'].transform(lambda x: -np.log10(multipletests(10 ** -x, method='fdr_bh')[1]))

# Split values in the ALLELE1 column into two columns named MASK and AFBIN using the first dot as separator
dt_clean = dt.assign(tmp_col=dt['ALLELE1'].apply(lambda x: x.replace('.', '@', 1))) \
  .assign(MASK=lambda x: x['tmp_col'].apply(lambda x: x.split('@')[0])) \
  .assign(AFBIN=lambda x: x['tmp_col'].apply(lambda x: x.split('@')[1])) \
  .drop(columns=['tmp_col'])

dt_clean['GENE'] = dt_clean.apply(lambda x: x['ID'].split('.')[0], axis=1)

# Save table with corrected P values
# prefix = regenie_filename.rstrip('.gz')
# dt_clean.to_csv(f"{prefix}.correctedP", sep='\t', index=False, na_rep='NA')

# Create a uniqued ID by merging ID and TEST columns
dt_clean['UNIQUEID'] = dt_clean['ID'] + '.' + dt_clean['TEST']

# Generate table of bonferroni thresholds for each specific test 
bonferroni_threshold_df = dt_clean.groupby(['MASK', 'AFBIN', 'TEST']) \
  .apply(lambda x: pd.DataFrame({'bonferroni_thr': -np.log10(0.05 / len(x['LOG10P']))}, index=[0]))
bonferroni_threshold_df.reset_index(inplace=True)

# Compute bonferroni thresholds for plotting
bonferroni_threshold_low = bonferroni_threshold_df['bonferroni_thr'].max()
bonferroni_threshold_high = -np.log10(0.05 / len(dt_clean['LOG10P']))

# Find FDR threshold for plotting
# This is the min LOG10P resulting in a global FDR across all tests < 0.05
fdr_sorted_df = dt_clean.sort_values(by=['LOG10P_FDR_alltests'], ascending=False)
test_fdr_value = fdr_sorted_df[fdr_sorted_df['LOG10P_FDR_alltests'] >= -np.log10(0.05)].index.max()
fdr_global_threshold = None if np.isnan(test_fdr_value) else fdr_sorted_df.loc[test_fdr_value, 'LOG10P']
# END: ed8c6549bwf9
```

### Manhattan plot - overall results

```{python global_results_md}

display(Markdown(
  f"""
The first plot represents results using raw LOG10P values.

- the dashed red line represents the Bonferroni threshold when correcting across all results
- the dashed orange line represents the highest (more stringent) Bonferroni threshold when correcting for each test group separately (namely each combination of test * mask * afbin). 
- the blue dashed line represent the P value for which the global FDR (FDR computed across all results) is <= 0.05. This line is missing when there are no results with global FDR <= 0.05.
- the green line represent your configured threshold ({tophits_min_value}). Genes above this line are annotated.

  """
))
```

```{python qqman}
#| fig-width: 12
#| fig-height: 5
#| include: false

#Group by gene name and select the top hit
dt_top_per_gene = dt_clean.groupby('GENE').apply(lambda x: x.loc[x['LOG10P'].idxmax()]).reset_index(drop=True)

# From dt_top_per_gene get list of IDs where LOG10P is above bonferroni_threshold_low
# This is used to annotate the plot
annotated_ids = dt_top_per_gene[dt_top_per_gene['LOG10P'] >= tophits_min_value]['UNIQUEID'].tolist()

# Import as summary stats object
regenieTable = gl.Sumstats(
  dt_top_per_gene,
  snpid='UNIQUEID',
  chrom='CHROM',
  pos='GENPOS',
  mlog10p='LOG10P',
  n='N',
  beta='BETA',
  se='SE',
  other=['GENE','TEST','AFBIN','MASK'],
  verbose=False,
  build=genome_build
)

# Convert log10P to P
# regenieTable.data['P'] = 10 ** -regenieTable.data['MLOG10P']

# Configure additional lines based on thresholds
additional_lines = [10 ** -tophits_min_value]
additional_lines_colors = ['green']
if fdr_global_threshold:
  additional_lines.append(10 ** -fdr_global_threshold)
  additional_lines_colors.append('blue')

#Plot Manhattan
figure, log = regenieTable.plot_mqq(
  mode="m", skip = 1, scaled=True,
  build=genome_build,
  anno='GENE', anno_set=annotated_ids,
  pinpoint=annotated_ids,
  suggestive_sig_line=True,
  suggestive_sig_level= 10 ** -bonferroni_threshold_low,
  sig_level= 10 ** -bonferroni_threshold_high,
  sig_line_color='red',
  suggestive_sig_line_color='orange',
  additional_line=additional_lines, 
  additional_line_color=additional_lines_colors,
  verbose=False)
```

```{python manhattan_display}
#| fig-width: 12
#| fig-height: 5

display(figure)
```

### Manhattan plot - configured statistics

```{python global_results_md}

display(Markdown(
  f"""
In the second Manhattan plot the Y axis represents corrected P values based on the configured value: {sig_value_column}. 

Here, the red line represents the configured threshold ({sig_value_threshold}) and genes above this line are annotated. Please note that many point may be not visible since tests with a low raw LOG10P often result in near zero LOG(corrected P) and thus many points may be collapsed at the zero baseline.

  """
))
```

```{python qqman_specific}
#| include: false

annotated_ids = dt_top_per_gene[dt_top_per_gene[sig_value_column] >= sig_value_threshold]['UNIQUEID'].tolist()

regenieTable = gl.Sumstats(
  dt_top_per_gene,
  snpid='UNIQUEID',
  chrom='CHROM',
  pos='GENPOS',
  mlog10p=sig_value_column,
  n='N',
  beta='BETA',
  se='SE',
  other=['GENE','TEST','AFBIN','MASK'],
  verbose=False,
  build=genome_build
)

# regenieTable.data['P'] = 10 ** -regenieTable.data['MLOG10P']

#Plot Manhattan
figure, log = regenieTable.plot_mqq(
  mode="m", skip=0, scaled=True,
  build=genome_build,
  anno='GENE', anno_set=annotated_ids,
  pinpoint=annotated_ids,
  sig_level= 10 ** -sig_value_threshold,
  sig_line_color='red',
  verbose=False)
```

```{python manhattan_display2}
#| fig-width: 12
#| fig-height: 5

display(figure)
```

## Detailed results

The following section contains detailed results with Manhattan plots and QQ plots for each test group, namely each specific combination of test, mask and AF bin. In these plots the dashed red line represents the bonferroni threshold for the specific test group.

### Burden test

Results for standard burden test are showed separately for each mask and AF bin.

```{python burden_plot}
#| fig-width: 3
#| fig-height: 3
#| include: false

burden_plots = []

burden_dt = dt_clean[~dt_clean['TEST'].str.contains('-')]

masks = burden_dt['MASK'].unique().tolist()
afbins = burden_dt['AFBIN'].unique().tolist()
sig_value_threshold
# For each line generate a regional plot using the plot_mqq function
for m in masks:
  for a in afbins:
    sig_value_threshold = float(
      bonferroni_threshold_df[
      (bonferroni_threshold_df['MASK'] == m) & \
        (bonferroni_threshold_df['AFBIN'] == a) & \
          (bonferroni_threshold_df['TEST'] == 'ADD')
      ]['bonferroni_thr']
    )
    mydt = burden_dt[(burden_dt['MASK'] == m) & (burden_dt['AFBIN'] == a)]
    annotated_ids = mydt[(burden_dt['LOG10P'] >= sig_value_threshold)]['UNIQUEID'].tolist()
    
    regenieTable = gl.Sumstats(
      mydt,
      snpid='UNIQUEID',
      chrom='CHROM',
      pos='GENPOS',
      mlog10p='LOG10P',
      n='N',
      beta='BETA',
      se='SE',
      other=['GENE','TEST','AFBIN','MASK'],
      verbose=False,
      build=genome_build
    )

    plot_label = Markdown(f"#### Mask {m} - AF bin {a}\n\n")
    figure, log = regenieTable.plot_mqq(
      mode="qqm", skip=0, scaled=True,
      build=genome_build,
      anno='GENE', anno_set=annotated_ids,
      pinpoint=annotated_ids,
      sig_level= 10 ** -sig_value_threshold,
      sig_line_color='red',
      verbose=False)
    burden_plots.append((plot_label, figure))
```

::: {.callout-tip collapse="true"}
## Expand here to see results

```{python burden_plot_display}
#| fig-width: 3
#| fig-height: 3

for burden_plot in burden_plots:
  display(burden_plot[0], burden_plot[1])
```

:::

### Other rare variants tests

Results for other gene tests (SKAT, ACAT, ...) are showed separately for test and mask.

```{python othertests_plot}
#| fig-width: 3
#| fig-height: 3
#| include: false

test_plots = []

tests_dt = dt_clean[dt_clean['TEST'].str.contains('-')]

masks = tests_dt['MASK'].unique().tolist()
tests = tests_dt['TEST'].unique().tolist()
sig_value_threshold
# For each line generate a regional plot using the plot_mqq function
for t in tests:
  for m in masks:
    sig_value_threshold = float(
      bonferroni_threshold_df[
      (bonferroni_threshold_df['MASK'] == m) & \
        (bonferroni_threshold_df['TEST'] == t)
      ]['bonferroni_thr']
    )
    mydt = tests_dt[(tests_dt['MASK'] == m) & (tests_dt['TEST'] == t)]
    annotated_ids = mydt[(tests_dt['LOG10P'] >= sig_value_threshold)]['UNIQUEID'].tolist()

    regenieTable = gl.Sumstats(
      mydt,
      snpid='UNIQUEID',
      chrom='CHROM',
      pos='GENPOS',
      mlog10p='LOG10P',
      n='N',
      beta='BETA',
      se='SE',
      other=['GENE','TEST','AFBIN','MASK'],
      verbose=False,
      build=genome_build
    )

    plot_label = Markdown(f"#### Test {t} - Mask {m}\n\n")
    figure, log = regenieTable.plot_mqq(
      mode="qqm", skip=0, scaled=True,
      build=genome_build,
      anno='GENE', anno_set=annotated_ids,
      pinpoint=annotated_ids,
      sig_level= 10 ** -sig_value_threshold,
      sig_line_color='red',
      verbose=False)
    test_plots.append((plot_label, figure))
```

::: {.callout-tip collapse="true"}
## Expand here to see results

```{python othertests_plot_display}
#| fig-width: 3
#| fig-height: 3

for test_plot in test_plots:
  display(test_plot[0], test_plot[1])
```

:::


```{python logs_section_title}
file_paths = [phenotype_log, covariate_log, regenie_step1_log, regenie_step2_log]

# check if at least one file exists
if any(file_paths):
  display(Markdown("## Validation and Logs\n\n"))
```

```{python log1}
if phenotype_log:
  if os.path.exists(phenotype_log):
    phenotype_log_df = pd.read_csv(phenotype_log, sep="\t")
    display(Markdown("### Phenotype File Validation\n\n"))
    display(phenotype_log_df)
  else:
    display(Markdown("**Phenotype log file not found**\n\n"))
```

```{python log2} 
if covariate_log:
  if os.path.exists(covariate_log):
    covariate_log_df = pd.read_csv(covariate_log, sep="\t")
    display(Markdown("### Covariate File Validation\n\n"))
    display(covariate_log_df)
  else:
    display(Markdown("**Covariate log file not found**\n\n"))
```

```{python log3}
if regenie_step1_log:
  if os.path.exists(regenie_step1_log):
    step1_log_df = pd.read_csv(regenie_step1_log, sep="\t")
    display(Markdown("### Regenie Step 1 Log\n\n"))
    display(step1_log_df)
  else:
    display(Markdown("**Regenie Step 1 log file not found**\n\n"))
```

```{python log4}
if regenie_step2_log:
  if os.path.exists(regenie_step2_log):
    step2_log_df = pd.read_csv(regenie_step2_log, sep="\t")
    display(Markdown("### Regenie Step 2 Log\n\n"))
    display(step2_log_df)
  else:
    display(Markdown("**Regenie Step 2 log file not found**\n\n"))
```


---

<small>

```{python footer}
display(Markdown(
  f"""
This report has been created with **[nf-fast-regenie {version}](https://github.com/HTGenomeAnalysisUnit/nf-pipeline-regenie.git)**, a nextflow pipeline developed by [Edoardo Giacopuzzi](mailto:edoardo.giacopuzzi@fht.org) at the Human Technopole Foundation, Milan, Italy. Plots are generated using [gwaslab package](https://github.com/Cloufield/gwaslab/)
"""
))
```

</small>
